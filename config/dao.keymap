/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define UC_TAP_MS 10
#define UC_WAIT_MS 10

#define HELPER_STRINGIFY(x) #x

#define UC_MACRO(name, char_0, char_1, char_2, char_3) \
    / { \
        macros { \
            name: name { \
                compatible = "zmk,behavior-macro"; \
                label = HELPER_STRINGIFY(ucmc_ ## name); \
                #binding-cells = <0>; \
                tap-ms = <UC_TAP_MS>; \
                wait-ms = <UC_WAIT_MS>; \
                bindings = \
                    <&macro_tap &kp char_0 &kp char_1 &kp char_2 &kp char_3>, \
                    <&macro_press &kp LALT>, \
                    <&macro_tap &kp X>, \
                    <&macro_release &kp LALT>; \
            }; \
        }; \
    };

#define UC_TAPDANCE(name, bind_0, bind_1, bind_2, bind_3) \
    / { \
        behaviors { \
            name: name { \
                compatible = "zmk,behavior-macro"; \
                label = HELPER_STRINGIFY(uctd_ ## name); \
                #binding-cells = <0>; \
                tapping-term-ms = <200>; \
                bindings = <bind_0>, <bind_1>, <bind_2>, <bind_3>; \
            }; \
        }; \
    };

&lt {
    quick_tap_ms = <200>;
};

&mt {
    quick_tap_ms = <200>;
};

// Unicode Chars
UC_MACRO(a_grave, N0, N0, E, N0)
UC_MACRO(a_acute, N0, N0, E, N1)
UC_MACRO(a_grave_up, N0, N0, C, N0)
UC_MACRO(a_acute_up, N0, N0, C, N1)
UC_TAPDANCE(td_a_grave, a_grave, a_acute, a_grave_up, a_acute_up)
UC_MACRO(e_grave, N0, N0, E, N8)
UC_MACRO(e_acute, N0, N0, E, N9)
UC_MACRO(e_grave_up, N0, N0, C, N8)
UC_MACRO(e_acute_up, N0, N0, C, N9)
UC_TAPDANCE(td_e_grave, e_grave, e_acute, e_grave_up, e_acute_up)
UC_MACRO(i_grave, N0, N0, E, C)
UC_MACRO(i_acute, N0, N0, E, D)
UC_MACRO(i_grave_up, N0, N0, C, C)
UC_MACRO(i_acute_up, N0, N0, C, D)
UC_TAPDANCE(td_i_grave, i_grave, i_acute, i_grave_up, i_acute_up)
UC_MACRO(o_grave, N0, N0, F, N2)
UC_MACRO(o_acute, N0, N0, F, N3)
UC_MACRO(o_grave_up, N0, N0, D, N2)
UC_MACRO(o_acute_up, N0, N0, D, N3)
UC_TAPDANCE(td_o_grave, o_grave, o_acute, o_grave_up, o_acute_up)
UC_MACRO(u_grave, N0, N0, F, N9)
UC_MACRO(u_acute, N0, N0, F, A)
UC_MACRO(u_grave_up, N0, N0, D, N9)
UC_MACRO(u_acute_up, N0, N0, D, A)
UC_TAPDANCE(td_u_grave, u_grave, u_acute, u_grave_up, u_acute_up)

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LGUI RBKT    &kp Q  &kp W  &kp E        &kp R            &kp T        &kp Y        &kp U           &kp I        &kp O    &kp P     &kp LBKT
&mt LCTRL MINUS  &kp A  &kp S  &kp D        &kp F            &kp G        &lt 4 H      &kp J           &kp K        &kp L    &kp SEMI  &mt RCTRL SQT
&mt LALT GRAVE   &kp Z  &kp X  &kp C        &kp V            &kp B        &kp N        &kp M           &kp COMMA    &kp DOT  &kp FSLH  &mt RALT BSLH
                               &lt RSE TAB  &mt LSHFT SPACE  &lt LWR RET  &lt LWR ESC  &mt RSHFT BSPC  &lt RSE DEL
            >;
        };

        lower_layer {
            bindings = <
&mt LGUI F1     &kp F2    &kp F3  &kp F4       &kp F5    &kp F6     &kp F7     &kp F8    &kp F9       &kp F10   &kp F11   &kp F12
&mt LCTRL PLUS  &kp EXCL  &kp AT  &kp HASH     &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS  &kp STAR     &kp LPAR  &kp RPAR  &mt RCTRL MINUS
&mt LALT EQUAL  &kp N1    &kp N2  &kp N3       &kp N4    &kp N5     &kp N6     &kp N7    &kp N8       &kp N9    &kp N0    &kp RALT
                                  &lt ADJ TAB  &trans    &trans     &trans     &trans    &lt ADJ DEL
            >;
        };

        raise_layer {
            bindings = <
&mt LGUI KP_NUM  &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp C_VOL_UP  &kp HOME  &kp UP           &kp PG_UP  &kp SLCK         &kp CLCK
&mt LCTRL EQUAL  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &kp C_MUTE    &kp LEFT  &kp DOWN         &kp RIGHT  &kp INS          &mt RCTRL K_APP
&kp LALT         &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT    &kp C_VOL_DN  &kp END   &kp PRINTSCREEN  &kp PG_DN  &kp PAUSE_BREAK  &kp RALT
                                             &trans     &trans     &lt ADJ RET   &lt ADJ ESC   &trans    &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none         &none         &out OUT_USB  &none         &none         &none         &none         &out OUT_USB  &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &out OUT_BLE  &none         &none         &none         &none         &out OUT_BLE  &none         &none         &sys_reset
                                         &trans        &none         &trans        &none         &trans        &trans
            >;
        };

        unicode_layer {
            bindings = <
&trans  &trans  		&trans  &td_e_grave 	&trans  &trans  &trans  &td_u_grave 	&td_i_grave  	&td_o_grave  	&trans  &trans
&trans  &td_a_grave  	&trans  &trans  		&trans  &trans  &trans  &trans 			&trans  		&trans  		&trans  &trans
&trans  &trans  		&trans  &trans  		&trans  &trans  &trans  &trans 			&trans  		&trans  		&trans  &trans
                        		&trans  		&trans  &trans  &trans  &trans 			&trans
            >;
        };
    };
};
